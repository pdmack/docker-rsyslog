# Populating top-level fields

# Now that we have parsed out any CEE JSON data in log messages, we have a CEE
# JSON tree with at least a "msg" field.  We proceed with normalizing the data
# to remove redundant pieces of information, and cleanup known bad data.

# The mmjsonparse action above has made sure the $!msg is always populated
# with $msg if initially unpopulated.
#
if (strlen($!msg) > 0) then {
    set $.msg = $!msg;
} else {
    if ($inputname == "impstats") then {
        set $.msg = "pstats";
    } else {
        set $.msg = $msg;
    }
}
if (strlen($!MESSAGE) > 0) and ($!MESSAGE != $.msg) then {
    # Use the systemd message value when present.
    # original_raw_message saves the original unparsed $msg in case $!MESSAGE from journald is not equal to $!msg
    set $.msg = $!MESSAGE;
    set $.pipeline_metadata!normalizer!original_raw_message = $msg;
}

# Always pull msg out of the message properties so that it does not show up
# again under the CEE property in ElasticSearch.
unset $!msg;
unset $!MESSAGE;

if ($!_HOSTNAME == $hostname) then {
    unset $!_HOSTNAME;
}
set $.hostname = $hostname;

# If we don't have tags - we don't add new tags.
if (strlen($!tags) > 0) then {
    set $.tags = $!tags;
}
# Always pull tags out of the message properties so that it does not show up
# again under the CEE property in ElasticSearch.
unset $!tags;

# We'll attempt to normalize the PID value we have from the default rsyslog
# properties with collected systemd properties below.
# $procid is the PID according to syslog rfc's
# Since this rsyslog instance is running in the container it doesn't have any local input, everything is from imptcp/imudp
set $.pid = $procid;

# $!pid and $!_PID might be coming from journald
if strlen($!pid) > 0 then {
    # The imjournal normalized _PID to pid in its message properties. TODO: move PID to top level
    set $.fwdpid = $!pid;
} else {
    if strlen($!_PID) > 0 then {
        set $.fwdpid = $!_PID;
    }
}
unset $!_PID;
unset $!pid;

if strlen($.fwdpid) > 0 then {
    if ($.pid == "-") and ($.fwdpid != "-") then {
        # We don't have a PID, so use the one we found in the systemd data.
        set $.pid = $.fwdpid;
    } else {
        if ($.pid != $.fwdpid) then {
            # We have a PID, but the systemd's PID is different, so be
            # sure to save it.
            set $.systemd!t!PID = $.fwdpid;
        }
    }
}

set $.level = $syslogseverity-text;

# if ipaddr4 was set by the collector we must preserve it.
if (strlen($!ipaddr4) > 0) then {
    set $.ipaddr4 = $!ipaddr4;
    unset $!ipaddr4;
} else if ($fromhost == $.hostname) then {
    # iff fromhost == hostname we can set $.ipaddr4 as $.fromhost-ip
    set $.ipaddr4 = $fromhost-ip;
}

# Now drop app-name if it is the same as programname, don't need to index
# both, and if either or both are still blank, just drop them entirely.
if (strlen($programname) > 0) then {
    set $.service = $programname;
 } else if (strlen($app-name) > 0) then {
    set $.service = $app-name;
}

# if $.service == programname then we might need to save $app-name, if $.service == $app-name then it implies $.service == $programname OR $programname is empty
if ($.service != $app-name) then {
    set $.rsyslog!appname=$app-name;
}
# If we unset, the output template will contain empty string
if (strlen($.service) == 0) then {
    unset $.service;
}
if (strlen($.rsyslog!appname) == 0) then {
    unset $.rsyslog!appname;
}
